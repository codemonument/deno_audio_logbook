import * as hex from "$std/encoding/hex.ts";
import { secretsPromise } from "@/src/utils/secrets.ts";
import { z, ZodError } from "zod";

const secrets = await secretsPromise;
const telegramToken = z.string().parse(secrets.get("TELEGRAM_TOKEN"));

/**
 * @param urlParams
 * @returns <string> authString - The string containing userdata to be hashed with hmac sha256
 */
function buildAuthString(urlParams: URLSearchParams) {
  const authStringArray = [] as string[];

  urlParams.delete("hash");
  urlParams.sort();

  urlParams.forEach((value, key) => {
    authStringArray.push(`${key}=${value}`);
  });

  const authString = authStringArray.join("\n");
  return authString;
}

/**
 * @param urlParams
 * @param compareHash
 * @returns Promise<boolean> - true if the verification succeeded, false if not
 *
 * @description
 * This function verifies the authenticity of the telegram bot webhook request.
 * It does so by hashing the telegram token with sha256 and then using the hash as a secret to generate a hmac signature.
 * The signature is then compared with the hash provided by telegram.
 *
 * You can confirm the auth manually by using the following command in your terminal:
 *
 * `echo -n <authstring> | openssl sha256 -mac hmac -macopt hexkey:$(echo -n "BotToken"|sha256sum)`
 * - replace <authstring> with the authstring generated by buildAuthString
 * - replace BotToken with your telegram bot token
 */
export async function verifyBotAuth(
  urlParams: URLSearchParams,
  compareHash: string,
) {
  // pass search params to buildAuthString
  const authDataCheckString = buildAuthString(urlParams);

  const encoder = new TextEncoder();

  // hash telegram token with sha256, requires byte array

  const telegramTokenHashed = await crypto.subtle.digest(
    "SHA-256",
    encoder.encode(telegramToken),
  );

  // generate hmac from hash and authDataCheckString
  const hmacSecret = await crypto.subtle.importKey(
    "raw",
    telegramTokenHashed,
    { name: "HMAC", hash: "SHA-256" },
    false,
    ["sign"],
  );

  const dataStringSignature = await crypto.subtle.sign(
    "HMAC",
    hmacSecret,
    encoder.encode(authDataCheckString),
  );

  const signatureHex = new TextDecoder().decode(
    hex.encode(new Uint8Array(dataStringSignature)),
  );

  // compare signatureHex with compareHash
  return signatureHex === compareHash;
}
